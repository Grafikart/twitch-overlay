import{C as e,P as n}from"./vendor.51270a12.js";!function(e=".",n="__import__"){try{self[n]=new Function("u","return import(u)")}catch(o){const t=new URL(e,location),r=e=>{URL.revokeObjectURL(e.src),e.remove()};self[n]=e=>new Promise(((o,a)=>{const i=new URL(e,t);if(self[n].moduleMap[i])return o(self[n].moduleMap[i]);const c=new Blob([`import * as m from '${i}';`,`${n}.moduleMap['${i}']=m;`],{type:"text/javascript"}),s=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(c),onerror(){a(new Error(`Failed to import: ${e}`)),r(s)},onload(){o(self[n].moduleMap[i]),r(s)}});document.head.appendChild(s)})),self[n].moduleMap={}}}("/assets/");const o=new URL(window.location.href);["os","ide"].forEach((e=>{o.searchParams.get(e)&&(document.getElementById(e).innerText=o.searchParams.get(e))}));const t=new n(new e({container:document.body,watchScroll:!1,pixelRatio:Math.min(2,window.devicePixelRatio)}),document.getElementById("background"),{vertexShader:"precision mediump float;\n// default mandatory variables\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n// custom variables\nvarying vec3 vVertexPosition;\nvarying vec2 vTextureCoord;\nvoid main() {\n    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n    // varying\n    vVertexPosition = aVertexPosition;\n    vTextureCoord = aTextureCoord;\n}\n",fragmentShader:"precision mediump float;\nvarying vec3 vVertexPosition;\nvarying vec2 vTextureCoord;\nuniform float uTime;\n\nvec2 random2(vec2 p) {\n    return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3))))*43758.5453);\n}\n\nfloat circle (vec2 st, vec2 center, float radius, float flatForce) {\n    st.x = st.x * flatForce;\n    center.x = center.x * flatForce;\n    return smoothstep(0.0, 1.0, 1.0 - (distance(center, st) / radius));\n}\n\nfloat between (float min, float max, float factor) {\n    return min + (max - min) * factor;\n}\n\nfloat scie (float x) {\n    return abs(fract(x) - 0.5) * 2.0;\n}\n\nvoid main() {\n    vec2 resolution = vec2(1.0, 0.5625);\n    resolution = normalize(vec2(1920, 1080));\n    vec2 position = (vec2(vVertexPosition.x, vVertexPosition.y) * 0.5 + 0.5) * resolution;\n\n    float force = 0.0;\n\n    for (int j = 1; j <= 7; j++) {\n        vec2 random = random2(vec2(j) * 0.1);\n        vec2 center = random2(vec2(j + 4) * 0.1);\n        float speed = between(0.000001, 0.00003, random.x);\n        float size = between(0.02, 0.15, random.y);\n        float progress = uTime * speed;\n        center.y = scie(progress + random.x) * (resolution.y + size * 2.0) - size;\n        // center.y = ((sin(uTime * speed + random.x * 6.28) + random.y) * 0.5 + 0.5) * resolution.y;\n        force += circle(position, center, size, between(0.7, 1.0, between(0.0, 1.0, sin(uTime * speed) * 0.5 + 0.5)));\n    }\n\n    // float colorForce = force * 0.2;\n    force = step(0.15, force);\n\n    // gl_FragColor = vec4(st.x, st.y, 1.0, 0.0);\n    float alpha = 1.0;\n\n    // gl_FragColor = vec4(0.28125 + colorForce, 0.41015 + colorForce, 0.9296 + colorForce, force * alpha);\n    gl_FragColor = vec4(0.28125, 0.41015, 0.9296, force * alpha);\n}\n\n/**\nvoid main() {\n    vec2 uMousePosition = vec2(sin(uTime * 0.001));\n    float force = sin(uTime * 0.001);\n    gl_FragColor = vec4(vec3(force), 1.0);\n}\n**/\n",uniforms:{uTime:{name:"uTime",type:"1f",value:0}}}),r=Date.now();t.onRender((()=>{t.uniforms.uTime.value=Date.now()-r}));
